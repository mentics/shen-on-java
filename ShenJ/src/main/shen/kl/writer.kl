(defun print (V1081)
 (do
  (pr (shen-ms-h (cons "~" (cons "S" ())) (@p V1081 shen-skip))
   (shen-stoutput 0))
  V1081))

(defun format (V1082 V1083 V1084)
 (cond ((= true V1082) (intoutput V1083 (@p V1084 ())))
  ((= false V1082) (intmake-string V1083 (@p V1084 ())))
  (true (pr (shen-ms-h (explode V1083) V1084) V1082))))

(defun intoutput (V1085 V1086)
 (pr (shen-ms-h (shen-explode-string V1085) V1086) (shen-stoutput 0)))

(defun interror (V1087 V1088)
 (simple-error (shen-ms-h (shen-explode-string V1087) V1088)))

(defun intmake-string (V1089 V1090)
 (shen-ms-h (shen-explode-string V1089) V1090))

(defun shen-ms-h (V1093 V1094)
 (cond ((= () V1093) "")
  ((and (cons? V1093)
    (and (= "~" (hd V1093))
     (and (cons? (tl V1093)) (= "%" (hd (tl V1093))))))
   (cn (n->string 10) (shen-ms-h (tl (tl V1093)) V1094)))
  ((and (cons? V1093)
    (and (= "~" (hd V1093))
     (and (cons? (tl V1093))
      (and (tuple? V1094)
       (element? (hd (tl V1093)) (cons "A" (cons "S" (cons "R" ()))))))))
   (cn (shen-ob->str (hd (tl V1093)) (fst V1094))
    (shen-ms-h (tl (tl V1093)) (snd V1094))))
  ((cons? V1093) (cn (hd V1093) (shen-ms-h (tl V1093) V1094)))
  (true (shen-sys-error shen-ms-h))))

(defun shen-ob->str (V1098 V1099)
 (cond ((= V1099 (fail)) "...")
  ((= () V1099) (if (= V1098 "R") "()" "[]"))
  ((= V1099 (vector 0)) "<>")
  ((cons? V1099)
   (shen-cn-all
    (append (if (= V1098 "R") (cons "(" ()) (cons "[" ()))
     (append (cons (shen-ob->str V1098 (hd V1099)) ())
      (append
       (shen-xmapcan (value *maximum-print-sequence-size*)
        (lambda Z (cons " " (cons (shen-ob->str V1098 Z) ()))) (tl V1099))
       (if (= V1098 "R") (cons ")" ()) (cons "]" ())))))))
  ((vector? V1099)
   (let L (shen-vector->list V1099 1)
    (let E
     (tlstr
      (shen-cn-all
       (shen-xmapcan (- (value *maximum-print-sequence-size*) 1)
        (lambda Z
         (cons " " (cons (shen-ob->str V1098 (shen-blank-fail Z)) ())))
        L)))
     (let V (cn "<" (cn E ">")) V))))
  ((and (not (string? V1099)) (absvector? V1099))
   (trap-error (shen-ob->str "A" ((<-address V1099 0) V1099))
    (lambda Ignore
     (let L (shen-vector->list V1099 0)
      (let E
       (tlstr
        (shen-cn-all
         (shen-xmapcan (- (value *maximum-print-sequence-size*) 1)
          (lambda Z (cons " " (cons (shen-ob->str V1098 Z) ()))) L)))
       (let V (cn "<" (cn E ">")) V))))))
  ((= shen-vector-failure-object V1099) "...")
  (true (if (and (= V1098 "A") (string? V1099)) V1099 (str V1099)))))

(defun shen-blank-fail (V1100)
 (cond ((= V1100 (fail)) shen-vector-failure-object) (true V1100)))

(defun shen-tuple (V1101)
 (intmake-string "(@p ~S ~S)" (@p (fst V1101) (@p (snd V1101) ()))))

(defun shen-cn-all (V1102)
 (cond ((= () V1102) "")
  ((cons? V1102) (cn (hd V1102) (shen-cn-all (tl V1102))))
  (true (shen-sys-error shen-cn-all))))

(defun shen-xmapcan (V1115 V1116 V1117)
 (cond ((= () V1117) ()) ((= 0 V1115) (cons "... etc" ()))
  ((cons? V1117)
   (append (V1116 (hd V1117)) (shen-xmapcan (- V1115 1) V1116 (tl V1117))))
  (true (cons " |" (V1116 V1117)))))

(defun shen-vector->list (V1118 V1119) (shen-vector->listh V1118 V1119 ()))

(defun shen-vector->listh (V1120 V1121 V1122)
 (let Y (trap-error (<-address V1120 V1121) (lambda E shen-out-of-range))
  (if (= Y shen-out-of-range) (reverse V1122)
   (shen-vector->listh V1120 (+ V1121 1) (cons Y V1122)))))

