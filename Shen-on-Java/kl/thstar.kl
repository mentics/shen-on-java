(defun shen.th* (V2782 V2783 V2784 V2785 V2786) (let Throwcontrol (shen.catchpoint) (shen.cutpoint Throwcontrol (let Case (do (shen.incinfs) (shen.show (cons V2782 (cons : (cons V2783 ()))) V2784 V2785 (freeze (fwhen false V2785 V2786)))) (if (= Case false) (let Case (let F (shen.newpv V2785) (do (shen.incinfs) (fwhen (shen.typedf? (shen.lazyderef V2782 V2785)) V2785 (freeze (bind F (shen.sigf (shen.lazyderef V2782 V2785)) V2785 (freeze (call (cons F (cons V2783 ())) V2785 V2786))))))) (if (= Case false) (let Case (do (shen.incinfs) (shen.base V2782 V2783 V2785 V2786)) (if (= Case false) (let Case (do (shen.incinfs) (shen.by_hypothesis V2782 V2783 V2784 V2785 V2786)) (if (= Case false) (let Case (let V2623 (shen.lazyderef V2782 V2785) (if (cons? V2623) (let F (hd V2623) (let V2624 (shen.lazyderef (tl V2623) V2785) (if (= () V2624) (do (shen.incinfs) (shen.th* F (cons --> (cons V2783 ())) V2784 V2785 V2786)) false))) false)) (if (= Case false) (let Case (let V2625 (shen.lazyderef V2782 V2785) (if (cons? V2625) (let F (hd V2625) (let V2626 (shen.lazyderef (tl V2625) V2785) (if (cons? V2626) (let X (hd V2626) (let V2627 (shen.lazyderef (tl V2626) V2785) (if (= () V2627) (let B (shen.newpv V2785) (do (shen.incinfs) (shen.th* F (cons B (cons --> (cons V2783 ()))) V2784 V2785 (freeze (shen.th* X B V2784 V2785 V2786))))) false))) false))) false)) (if (= Case false) (let Case (let V2628 (shen.lazyderef V2782 V2785) (if (cons? V2628) (let V2629 (shen.lazyderef (hd V2628) V2785) (if (= cons V2629) (let V2630 (shen.lazyderef (tl V2628) V2785) (if (cons? V2630) (let X (hd V2630) (let V2631 (shen.lazyderef (tl V2630) V2785) (if (cons? V2631) (let Y (hd V2631) (let V2632 (shen.lazyderef (tl V2631) V2785) (if (= () V2632) (let V2633 (shen.lazyderef V2783 V2785) (if (cons? V2633) (let V2634 (shen.lazyderef (hd V2633) V2785) (if (= list V2634) (let V2635 (shen.lazyderef (tl V2633) V2785) (if (cons? V2635) (let A (hd V2635) (let V2636 (shen.lazyderef (tl V2635) V2785) (if (= () V2636) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (if (shen.pvar? V2636) (do (shen.bindv V2636 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2636 V2785) Result))) false)))) (if (shen.pvar? V2635) (let A (shen.newpv V2785) (do (shen.bindv V2635 (cons A ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2635 V2785) Result)))) false))) (if (shen.pvar? V2634) (do (shen.bindv V2634 list V2785) (let Result (let V2637 (shen.lazyderef (tl V2633) V2785) (if (cons? V2637) (let A (hd V2637) (let V2638 (shen.lazyderef (tl V2637) V2785) (if (= () V2638) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (if (shen.pvar? V2638) (do (shen.bindv V2638 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2638 V2785) Result))) false)))) (if (shen.pvar? V2637) (let A (shen.newpv V2785) (do (shen.bindv V2637 (cons A ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2637 V2785) Result)))) false))) (do (shen.unbindv V2634 V2785) Result))) false))) (if (shen.pvar? V2633) (let A (shen.newpv V2785) (do (shen.bindv V2633 (cons list (cons A ())) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons list (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2633 V2785) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2639 (shen.lazyderef V2782 V2785) (if (cons? V2639) (let V2640 (shen.lazyderef (hd V2639) V2785) (if (= @p V2640) (let V2641 (shen.lazyderef (tl V2639) V2785) (if (cons? V2641) (let X (hd V2641) (let V2642 (shen.lazyderef (tl V2641) V2785) (if (cons? V2642) (let Y (hd V2642) (let V2643 (shen.lazyderef (tl V2642) V2785) (if (= () V2643) (let V2644 (shen.lazyderef V2783 V2785) (if (cons? V2644) (let A (hd V2644) (let V2645 (shen.lazyderef (tl V2644) V2785) (if (cons? V2645) (let V2646 (shen.lazyderef (hd V2645) V2785) (if (= * V2646) (let V2647 (shen.lazyderef (tl V2645) V2785) (if (cons? V2647) (let B (hd V2647) (let V2648 (shen.lazyderef (tl V2647) V2785) (if (= () V2648) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (if (shen.pvar? V2648) (do (shen.bindv V2648 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2648 V2785) Result))) false)))) (if (shen.pvar? V2647) (let B (shen.newpv V2785) (do (shen.bindv V2647 (cons B ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2647 V2785) Result)))) false))) (if (shen.pvar? V2646) (do (shen.bindv V2646 * V2785) (let Result (let V2649 (shen.lazyderef (tl V2645) V2785) (if (cons? V2649) (let B (hd V2649) (let V2650 (shen.lazyderef (tl V2649) V2785) (if (= () V2650) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (if (shen.pvar? V2650) (do (shen.bindv V2650 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2650 V2785) Result))) false)))) (if (shen.pvar? V2649) (let B (shen.newpv V2785) (do (shen.bindv V2649 (cons B ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2649 V2785) Result)))) false))) (do (shen.unbindv V2646 V2785) Result))) false))) (if (shen.pvar? V2645) (let B (shen.newpv V2785) (do (shen.bindv V2645 (cons * (cons B ())) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2645 V2785) Result)))) false)))) (if (shen.pvar? V2644) (let A (shen.newpv V2785) (let B (shen.newpv V2785) (do (shen.bindv V2644 (cons A (cons * (cons B ()))) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y B V2784 V2785 V2786)))) (do (shen.unbindv V2644 V2785) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2651 (shen.lazyderef V2782 V2785) (if (cons? V2651) (let V2652 (shen.lazyderef (hd V2651) V2785) (if (= @v V2652) (let V2653 (shen.lazyderef (tl V2651) V2785) (if (cons? V2653) (let X (hd V2653) (let V2654 (shen.lazyderef (tl V2653) V2785) (if (cons? V2654) (let Y (hd V2654) (let V2655 (shen.lazyderef (tl V2654) V2785) (if (= () V2655) (let V2656 (shen.lazyderef V2783 V2785) (if (cons? V2656) (let V2657 (shen.lazyderef (hd V2656) V2785) (if (= vector V2657) (let V2658 (shen.lazyderef (tl V2656) V2785) (if (cons? V2658) (let A (hd V2658) (let V2659 (shen.lazyderef (tl V2658) V2785) (if (= () V2659) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (if (shen.pvar? V2659) (do (shen.bindv V2659 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2659 V2785) Result))) false)))) (if (shen.pvar? V2658) (let A (shen.newpv V2785) (do (shen.bindv V2658 (cons A ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2658 V2785) Result)))) false))) (if (shen.pvar? V2657) (do (shen.bindv V2657 vector V2785) (let Result (let V2660 (shen.lazyderef (tl V2656) V2785) (if (cons? V2660) (let A (hd V2660) (let V2661 (shen.lazyderef (tl V2660) V2785) (if (= () V2661) (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (if (shen.pvar? V2661) (do (shen.bindv V2661 () V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2661 V2785) Result))) false)))) (if (shen.pvar? V2660) (let A (shen.newpv V2785) (do (shen.bindv V2660 (cons A ()) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2660 V2785) Result)))) false))) (do (shen.unbindv V2657 V2785) Result))) false))) (if (shen.pvar? V2656) (let A (shen.newpv V2785) (do (shen.bindv V2656 (cons vector (cons A ())) V2785) (let Result (do (shen.incinfs) (shen.th* X A V2784 V2785 (freeze (shen.th* Y (cons vector (cons A ())) V2784 V2785 V2786)))) (do (shen.unbindv V2656 V2785) Result)))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2662 (shen.lazyderef V2782 V2785) (if (cons? V2662) (let V2663 (shen.lazyderef (hd V2662) V2785) (if (= @s V2663) (let V2664 (shen.lazyderef (tl V2662) V2785) (if (cons? V2664) (let X (hd V2664) (let V2665 (shen.lazyderef (tl V2664) V2785) (if (cons? V2665) (let Y (hd V2665) (let V2666 (shen.lazyderef (tl V2665) V2785) (if (= () V2666) (let V2667 (shen.lazyderef V2783 V2785) (if (= string V2667) (do (shen.incinfs) (shen.th* X string V2784 V2785 (freeze (shen.th* Y string V2784 V2785 V2786)))) (if (shen.pvar? V2667) (do (shen.bindv V2667 string V2785) (let Result (do (shen.incinfs) (shen.th* X string V2784 V2785 (freeze (shen.th* Y string V2784 V2785 V2786)))) (do (shen.unbindv V2667 V2785) Result))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2668 (shen.lazyderef V2782 V2785) (if (cons? V2668) (let V2669 (shen.lazyderef (hd V2668) V2785) (if (= lambda V2669) (let V2670 (shen.lazyderef (tl V2668) V2785) (if (cons? V2670) (let X (hd V2670) (let V2671 (shen.lazyderef (tl V2670) V2785) (if (cons? V2671) (let Y (hd V2671) (let V2672 (shen.lazyderef (tl V2671) V2785) (if (= () V2672) (let V2673 (shen.lazyderef V2783 V2785) (if (cons? V2673) (let A (hd V2673) (let V2674 (shen.lazyderef (tl V2673) V2785) (if (cons? V2674) (let V2675 (shen.lazyderef (hd V2674) V2785) (if (= --> V2675) (let V2676 (shen.lazyderef (tl V2674) V2785) (if (cons? V2676) (let B (hd V2676) (let V2677 (shen.lazyderef (tl V2676) V2785) (if (= () V2677) (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (if (shen.pvar? V2677) (do (shen.bindv V2677 () V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2677 V2785) Result))) false)))) (if (shen.pvar? V2676) (let B (shen.newpv V2785) (do (shen.bindv V2676 (cons B ()) V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2676 V2785) Result)))) false))) (if (shen.pvar? V2675) (do (shen.bindv V2675 --> V2785) (let Result (let V2678 (shen.lazyderef (tl V2674) V2785) (if (cons? V2678) (let B (hd V2678) (let V2679 (shen.lazyderef (tl V2678) V2785) (if (= () V2679) (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (if (shen.pvar? V2679) (do (shen.bindv V2679 () V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2679 V2785) Result))) false)))) (if (shen.pvar? V2678) (let B (shen.newpv V2785) (do (shen.bindv V2678 (cons B ()) V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2678 V2785) Result)))) false))) (do (shen.unbindv V2675 V2785) Result))) false))) (if (shen.pvar? V2674) (let B (shen.newpv V2785) (do (shen.bindv V2674 (cons --> (cons B ())) V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2674 V2785) Result)))) false)))) (if (shen.pvar? V2673) (let A (shen.newpv V2785) (let B (shen.newpv V2785) (do (shen.bindv V2673 (cons A (cons --> (cons B ()))) V2785) (let Result (let Z (shen.newpv V2785) (let X&& (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind Z (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Y V2785)) V2785 (freeze (shen.th* Z B (cons (cons X&& (cons : (cons A ()))) V2784) V2785 V2786)))))))))) (do (shen.unbindv V2673 V2785) Result))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2680 (shen.lazyderef V2782 V2785) (if (cons? V2680) (let V2681 (shen.lazyderef (hd V2680) V2785) (if (= let V2681) (let V2682 (shen.lazyderef (tl V2680) V2785) (if (cons? V2682) (let X (hd V2682) (let V2683 (shen.lazyderef (tl V2682) V2785) (if (cons? V2683) (let Y (hd V2683) (let V2684 (shen.lazyderef (tl V2683) V2785) (if (cons? V2684) (let Z (hd V2684) (let V2685 (shen.lazyderef (tl V2684) V2785) (if (= () V2685) (let W (shen.newpv V2785) (let X&& (shen.newpv V2785) (let B (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.th* Y B V2784 V2785 (freeze (bind X&& (shen.placeholder) V2785 (freeze (bind W (shen.ebr (shen.lazyderef X&& V2785) (shen.lazyderef X V2785) (shen.lazyderef Z V2785)) V2785 (freeze (shen.th* W V2783 (cons (cons X&& (cons : (cons B ()))) V2784) V2785 V2786))))))))))))) false))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2686 (shen.lazyderef V2782 V2785) (if (cons? V2686) (let V2687 (shen.lazyderef (hd V2686) V2785) (if (= open V2687) (let V2688 (shen.lazyderef (tl V2686) V2785) (if (cons? V2688) (let V2689 (shen.lazyderef (hd V2688) V2785) (if (= file V2689) (let V2690 (shen.lazyderef (tl V2688) V2785) (if (cons? V2690) (let FileName (hd V2690) (let V2691 (shen.lazyderef (tl V2690) V2785) (if (cons? V2691) (let Direction2619 (hd V2691) (let V2692 (shen.lazyderef (tl V2691) V2785) (if (= () V2692) (let V2693 (shen.lazyderef V2783 V2785) (if (cons? V2693) (let V2694 (shen.lazyderef (hd V2693) V2785) (if (= stream V2694) (let V2695 (shen.lazyderef (tl V2693) V2785) (if (cons? V2695) (let Direction (hd V2695) (let V2696 (shen.lazyderef (tl V2695) V2785) (if (= () V2696) (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (if (shen.pvar? V2696) (do (shen.bindv V2696 () V2785) (let Result (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (do (shen.unbindv V2696 V2785) Result))) false)))) (if (shen.pvar? V2695) (let Direction (shen.newpv V2785) (do (shen.bindv V2695 (cons Direction ()) V2785) (let Result (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (do (shen.unbindv V2695 V2785) Result)))) false))) (if (shen.pvar? V2694) (do (shen.bindv V2694 stream V2785) (let Result (let V2697 (shen.lazyderef (tl V2693) V2785) (if (cons? V2697) (let Direction (hd V2697) (let V2698 (shen.lazyderef (tl V2697) V2785) (if (= () V2698) (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (if (shen.pvar? V2698) (do (shen.bindv V2698 () V2785) (let Result (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (do (shen.unbindv V2698 V2785) Result))) false)))) (if (shen.pvar? V2697) (let Direction (shen.newpv V2785) (do (shen.bindv V2697 (cons Direction ()) V2785) (let Result (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (do (shen.unbindv V2697 V2785) Result)))) false))) (do (shen.unbindv V2694 V2785) Result))) false))) (if (shen.pvar? V2693) (let Direction (shen.newpv V2785) (do (shen.bindv V2693 (cons stream (cons Direction ())) V2785) (let Result (do (shen.incinfs) (unify! Direction Direction2619 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* FileName string V2784 V2785 V2786)))))) (do (shen.unbindv V2693 V2785) Result)))) false))) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2699 (shen.lazyderef V2782 V2785) (if (cons? V2699) (let V2700 (shen.lazyderef (hd V2699) V2785) (if (= type V2700) (let V2701 (shen.lazyderef (tl V2699) V2785) (if (cons? V2701) (let X (hd V2701) (let V2702 (shen.lazyderef (tl V2701) V2785) (if (cons? V2702) (let A (hd V2702) (let V2703 (shen.lazyderef (tl V2702) V2785) (if (= () V2703) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (unify A V2783 V2785 (freeze (shen.th* X A V2784 V2785 V2786)))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2704 (shen.lazyderef V2782 V2785) (if (cons? V2704) (let V2705 (shen.lazyderef (hd V2704) V2785) (if (= input+ V2705) (let V2706 (shen.lazyderef (tl V2704) V2785) (if (cons? V2706) (let V2707 (shen.lazyderef (hd V2706) V2785) (if (= : V2707) (let V2708 (shen.lazyderef (tl V2706) V2785) (if (cons? V2708) (let A (hd V2708) (let V2709 (shen.lazyderef (tl V2708) V2785) (if (= () V2709) (let C (shen.newpv V2785) (do (shen.incinfs) (bind C (shen.normalise-type (shen.lazyderef A V2785)) V2785 (freeze (unify V2783 C V2785 V2786))))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2710 (shen.lazyderef V2782 V2785) (if (cons? V2710) (let V2711 (shen.lazyderef (hd V2710) V2785) (if (= where V2711) (let V2712 (shen.lazyderef (tl V2710) V2785) (if (cons? V2712) (let P (hd V2712) (let V2713 (shen.lazyderef (tl V2712) V2785) (if (cons? V2713) (let X (hd V2713) (let V2714 (shen.lazyderef (tl V2713) V2785) (if (= () V2714) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.th* P boolean V2784 V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* X V2783 (cons (cons P (cons : (cons verified ()))) V2784) V2785 V2786)))))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2715 (shen.lazyderef V2782 V2785) (if (cons? V2715) (let V2716 (shen.lazyderef (hd V2715) V2785) (if (= set V2716) (let V2717 (shen.lazyderef (tl V2715) V2785) (if (cons? V2717) (let Var (hd V2717) (let V2718 (shen.lazyderef (tl V2717) V2785) (if (cons? V2718) (let Val (hd V2718) (let V2719 (shen.lazyderef (tl V2718) V2785) (if (= () V2719) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.th* (cons value (cons Var ())) V2783 V2784 V2785 (freeze (shen.th* Val V2783 V2784 V2785 V2786)))))) false))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2720 (shen.lazyderef V2782 V2785) (if (cons? V2720) (let V2721 (shen.lazyderef (hd V2720) V2785) (if (= shen.<-sem V2721) (let V2722 (shen.lazyderef (tl V2720) V2785) (if (cons? V2722) (let F (hd V2722) (let V2723 (shen.lazyderef (tl V2722) V2785) (if (= () V2723) (let A (shen.newpv V2785) (let F&& (shen.newpv V2785) (let B (shen.newpv V2785) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.th* F (cons A (cons ==> (cons B ()))) V2784 V2785 (freeze (cut Throwcontrol V2785 (freeze (bind F&& (concat && (shen.lazyderef F V2785)) V2785 (freeze (cut Throwcontrol V2785 (freeze (shen.th* F&& V2783 (cons (cons F&& (cons : (cons B ()))) V2784) V2785 V2786))))))))))))))) false))) false)) false)) false)) (if (= Case false) (let Case (let V2724 (shen.lazyderef V2782 V2785) (if (cons? V2724) (let V2725 (shen.lazyderef (hd V2724) V2785) (if (= fail V2725) (let V2726 (shen.lazyderef (tl V2724) V2785) (if (= () V2726) (let V2727 (shen.lazyderef V2783 V2785) (if (= symbol V2727) (do (shen.incinfs) (thaw V2786)) (if (shen.pvar? V2727) (do (shen.bindv V2727 symbol V2785) (let Result (do (shen.incinfs) (thaw V2786)) (do (shen.unbindv V2727 V2785) Result))) false))) false)) false)) false)) (if (= Case false) (let Case (let NewHyp (shen.newpv V2785) (do (shen.incinfs) (shen.t*-hyps V2784 NewHyp V2785 (freeze (shen.th* V2782 V2783 NewHyp V2785 V2786))))) (if (= Case false) (let Case (let V2728 (shen.lazyderef V2782 V2785) (if (cons? V2728) (let V2729 (shen.lazyderef (hd V2728) V2785) (if (= define V2729) (let V2730 (shen.lazyderef (tl V2728) V2785) (if (cons? V2730) (let F (hd V2730) (let X (tl V2730) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.t*-def (cons define (cons F X)) V2783 V2784 V2785 V2786)))))) false)) false)) false)) (if (= Case false) (let Case (let V2731 (shen.lazyderef V2782 V2785) (if (cons? V2731) (let V2732 (shen.lazyderef (hd V2731) V2785) (if (= defcc V2732) (let V2733 (shen.lazyderef (tl V2731) V2785) (if (cons? V2733) (let F (hd V2733) (let X (tl V2733) (do (shen.incinfs) (cut Throwcontrol V2785 (freeze (shen.t*-defcc (cons defcc (cons F X)) V2783 V2784 V2785 V2786)))))) false)) false)) false)) (if (= Case false) (let Case (let V2734 (shen.lazyderef V2782 V2785) (if (cons? V2734) (let V2735 (shen.lazyderef (hd V2734) V2785) (if (= shen.process-datatype V2735) (let V2736 (shen.lazyderef V2783 V2785) (if (= symbol V2736) (do (shen.incinfs) (thaw V2786)) (if (shen.pvar? V2736) (do (shen.bindv V2736 symbol V2785) (let Result (do (shen.incinfs) (thaw V2786)) (do (shen.unbindv V2736 V2785) Result))) false))) false)) false)) (if (= Case false) (let Case (let V2737 (shen.lazyderef V2782 V2785) (if (cons? V2737) (let V2738 (shen.lazyderef (hd V2737) V2785) (if (= shen.synonyms-help V2738) (let V2739 (shen.lazyderef V2783 V2785) (if (= symbol V2739) (do (shen.incinfs) (thaw V2786)) (if (shen.pvar? V2739) (do (shen.bindv V2739 symbol V2785) (let Result (do (shen.incinfs) (thaw V2786)) (do (shen.unbindv V2739 V2785) Result))) false))) false)) false)) (if (= Case false) (let Datatypes (shen.newpv V2785) (do (shen.incinfs) (bind Datatypes (value shen.*datatypes*) V2785 (freeze (shen.udefs* (cons V2782 (cons : (cons V2783 ()))) V2784 Datatypes V2785 V2786))))) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)) Case)))))

(defun shen.t*-hyps (V2787 V2788 V2789 V2790) (let Case (let V2534 (shen.lazyderef V2787 V2789) (if (cons? V2534) (let V2535 (shen.lazyderef (hd V2534) V2789) (if (cons? V2535) (let V2536 (shen.lazyderef (hd V2535) V2789) (if (cons? V2536) (let V2537 (shen.lazyderef (hd V2536) V2789) (if (= cons V2537) (let V2538 (shen.lazyderef (tl V2536) V2789) (if (cons? V2538) (let X (hd V2538) (let V2539 (shen.lazyderef (tl V2538) V2789) (if (cons? V2539) (let Y (hd V2539) (let V2540 (shen.lazyderef (tl V2539) V2789) (if (= () V2540) (let V2541 (shen.lazyderef (tl V2535) V2789) (if (cons? V2541) (let V2542 (shen.lazyderef (hd V2541) V2789) (if (= : V2542) (let V2543 (shen.lazyderef (tl V2541) V2789) (if (cons? V2543) (let V2544 (shen.lazyderef (hd V2543) V2789) (if (cons? V2544) (let V2545 (shen.lazyderef (hd V2544) V2789) (if (= list V2545) (let V2546 (shen.lazyderef (tl V2544) V2789) (if (cons? V2546) (let A (hd V2546) (let V2547 (shen.lazyderef (tl V2546) V2789) (if (= () V2547) (let V2548 (shen.lazyderef (tl V2543) V2789) (if (= () V2548) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2548) (do (shen.bindv V2548 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2548 V2789) Result))) false))) (if (shen.pvar? V2547) (do (shen.bindv V2547 () V2789) (let Result (let V2549 (shen.lazyderef (tl V2543) V2789) (if (= () V2549) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2549) (do (shen.bindv V2549 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2549 V2789) Result))) false))) (do (shen.unbindv V2547 V2789) Result))) false)))) (if (shen.pvar? V2546) (let A (shen.newpv V2789) (do (shen.bindv V2546 (cons A ()) V2789) (let Result (let V2550 (shen.lazyderef (tl V2543) V2789) (if (= () V2550) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2550) (do (shen.bindv V2550 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2550 V2789) Result))) false))) (do (shen.unbindv V2546 V2789) Result)))) false))) (if (shen.pvar? V2545) (do (shen.bindv V2545 list V2789) (let Result (let V2551 (shen.lazyderef (tl V2544) V2789) (if (cons? V2551) (let A (hd V2551) (let V2552 (shen.lazyderef (tl V2551) V2789) (if (= () V2552) (let V2553 (shen.lazyderef (tl V2543) V2789) (if (= () V2553) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2553) (do (shen.bindv V2553 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2553 V2789) Result))) false))) (if (shen.pvar? V2552) (do (shen.bindv V2552 () V2789) (let Result (let V2554 (shen.lazyderef (tl V2543) V2789) (if (= () V2554) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2554) (do (shen.bindv V2554 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2554 V2789) Result))) false))) (do (shen.unbindv V2552 V2789) Result))) false)))) (if (shen.pvar? V2551) (let A (shen.newpv V2789) (do (shen.bindv V2551 (cons A ()) V2789) (let Result (let V2555 (shen.lazyderef (tl V2543) V2789) (if (= () V2555) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2555) (do (shen.bindv V2555 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2555 V2789) Result))) false))) (do (shen.unbindv V2551 V2789) Result)))) false))) (do (shen.unbindv V2545 V2789) Result))) false))) (if (shen.pvar? V2544) (let A (shen.newpv V2789) (do (shen.bindv V2544 (cons list (cons A ())) V2789) (let Result (let V2556 (shen.lazyderef (tl V2543) V2789) (if (= () V2556) (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2556) (do (shen.bindv V2556 () V2789) (let Result (let Hyp (tl V2534) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons list (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2556 V2789) Result))) false))) (do (shen.unbindv V2544 V2789) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2557 (shen.lazyderef V2787 V2789) (if (cons? V2557) (let V2558 (shen.lazyderef (hd V2557) V2789) (if (cons? V2558) (let V2559 (shen.lazyderef (hd V2558) V2789) (if (cons? V2559) (let V2560 (shen.lazyderef (hd V2559) V2789) (if (= @p V2560) (let V2561 (shen.lazyderef (tl V2559) V2789) (if (cons? V2561) (let X (hd V2561) (let V2562 (shen.lazyderef (tl V2561) V2789) (if (cons? V2562) (let Y (hd V2562) (let V2563 (shen.lazyderef (tl V2562) V2789) (if (= () V2563) (let V2564 (shen.lazyderef (tl V2558) V2789) (if (cons? V2564) (let V2565 (shen.lazyderef (hd V2564) V2789) (if (= : V2565) (let V2566 (shen.lazyderef (tl V2564) V2789) (if (cons? V2566) (let V2567 (shen.lazyderef (hd V2566) V2789) (if (cons? V2567) (let A (hd V2567) (let V2568 (shen.lazyderef (tl V2567) V2789) (if (cons? V2568) (let V2569 (shen.lazyderef (hd V2568) V2789) (if (= * V2569) (let V2570 (shen.lazyderef (tl V2568) V2789) (if (cons? V2570) (let B (hd V2570) (let V2571 (shen.lazyderef (tl V2570) V2789) (if (= () V2571) (let V2572 (shen.lazyderef (tl V2566) V2789) (if (= () V2572) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2572) (do (shen.bindv V2572 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2572 V2789) Result))) false))) (if (shen.pvar? V2571) (do (shen.bindv V2571 () V2789) (let Result (let V2573 (shen.lazyderef (tl V2566) V2789) (if (= () V2573) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2573) (do (shen.bindv V2573 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2573 V2789) Result))) false))) (do (shen.unbindv V2571 V2789) Result))) false)))) (if (shen.pvar? V2570) (let B (shen.newpv V2789) (do (shen.bindv V2570 (cons B ()) V2789) (let Result (let V2574 (shen.lazyderef (tl V2566) V2789) (if (= () V2574) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2574) (do (shen.bindv V2574 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2574 V2789) Result))) false))) (do (shen.unbindv V2570 V2789) Result)))) false))) (if (shen.pvar? V2569) (do (shen.bindv V2569 * V2789) (let Result (let V2575 (shen.lazyderef (tl V2568) V2789) (if (cons? V2575) (let B (hd V2575) (let V2576 (shen.lazyderef (tl V2575) V2789) (if (= () V2576) (let V2577 (shen.lazyderef (tl V2566) V2789) (if (= () V2577) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2577) (do (shen.bindv V2577 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2577 V2789) Result))) false))) (if (shen.pvar? V2576) (do (shen.bindv V2576 () V2789) (let Result (let V2578 (shen.lazyderef (tl V2566) V2789) (if (= () V2578) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2578) (do (shen.bindv V2578 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2578 V2789) Result))) false))) (do (shen.unbindv V2576 V2789) Result))) false)))) (if (shen.pvar? V2575) (let B (shen.newpv V2789) (do (shen.bindv V2575 (cons B ()) V2789) (let Result (let V2579 (shen.lazyderef (tl V2566) V2789) (if (= () V2579) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2579) (do (shen.bindv V2579 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2579 V2789) Result))) false))) (do (shen.unbindv V2575 V2789) Result)))) false))) (do (shen.unbindv V2569 V2789) Result))) false))) (if (shen.pvar? V2568) (let B (shen.newpv V2789) (do (shen.bindv V2568 (cons * (cons B ())) V2789) (let Result (let V2580 (shen.lazyderef (tl V2566) V2789) (if (= () V2580) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2580) (do (shen.bindv V2580 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2580 V2789) Result))) false))) (do (shen.unbindv V2568 V2789) Result)))) false)))) (if (shen.pvar? V2567) (let A (shen.newpv V2789) (let B (shen.newpv V2789) (do (shen.bindv V2567 (cons A (cons * (cons B ()))) V2789) (let Result (let V2581 (shen.lazyderef (tl V2566) V2789) (if (= () V2581) (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2581) (do (shen.bindv V2581 () V2789) (let Result (let Hyp (tl V2557) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (shen.lazyderef B V2789) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2581 V2789) Result))) false))) (do (shen.unbindv V2567 V2789) Result))))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2582 (shen.lazyderef V2787 V2789) (if (cons? V2582) (let V2583 (shen.lazyderef (hd V2582) V2789) (if (cons? V2583) (let V2584 (shen.lazyderef (hd V2583) V2789) (if (cons? V2584) (let V2585 (shen.lazyderef (hd V2584) V2789) (if (= @v V2585) (let V2586 (shen.lazyderef (tl V2584) V2789) (if (cons? V2586) (let X (hd V2586) (let V2587 (shen.lazyderef (tl V2586) V2789) (if (cons? V2587) (let Y (hd V2587) (let V2588 (shen.lazyderef (tl V2587) V2789) (if (= () V2588) (let V2589 (shen.lazyderef (tl V2583) V2789) (if (cons? V2589) (let V2590 (shen.lazyderef (hd V2589) V2789) (if (= : V2590) (let V2591 (shen.lazyderef (tl V2589) V2789) (if (cons? V2591) (let V2592 (shen.lazyderef (hd V2591) V2789) (if (cons? V2592) (let V2593 (shen.lazyderef (hd V2592) V2789) (if (= vector V2593) (let V2594 (shen.lazyderef (tl V2592) V2789) (if (cons? V2594) (let A (hd V2594) (let V2595 (shen.lazyderef (tl V2594) V2789) (if (= () V2595) (let V2596 (shen.lazyderef (tl V2591) V2789) (if (= () V2596) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2596) (do (shen.bindv V2596 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2596 V2789) Result))) false))) (if (shen.pvar? V2595) (do (shen.bindv V2595 () V2789) (let Result (let V2597 (shen.lazyderef (tl V2591) V2789) (if (= () V2597) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2597) (do (shen.bindv V2597 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2597 V2789) Result))) false))) (do (shen.unbindv V2595 V2789) Result))) false)))) (if (shen.pvar? V2594) (let A (shen.newpv V2789) (do (shen.bindv V2594 (cons A ()) V2789) (let Result (let V2598 (shen.lazyderef (tl V2591) V2789) (if (= () V2598) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2598) (do (shen.bindv V2598 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2598 V2789) Result))) false))) (do (shen.unbindv V2594 V2789) Result)))) false))) (if (shen.pvar? V2593) (do (shen.bindv V2593 vector V2789) (let Result (let V2599 (shen.lazyderef (tl V2592) V2789) (if (cons? V2599) (let A (hd V2599) (let V2600 (shen.lazyderef (tl V2599) V2789) (if (= () V2600) (let V2601 (shen.lazyderef (tl V2591) V2789) (if (= () V2601) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2601) (do (shen.bindv V2601 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2601 V2789) Result))) false))) (if (shen.pvar? V2600) (do (shen.bindv V2600 () V2789) (let Result (let V2602 (shen.lazyderef (tl V2591) V2789) (if (= () V2602) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2602) (do (shen.bindv V2602 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2602 V2789) Result))) false))) (do (shen.unbindv V2600 V2789) Result))) false)))) (if (shen.pvar? V2599) (let A (shen.newpv V2789) (do (shen.bindv V2599 (cons A ()) V2789) (let Result (let V2603 (shen.lazyderef (tl V2591) V2789) (if (= () V2603) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2603) (do (shen.bindv V2603 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2603 V2789) Result))) false))) (do (shen.unbindv V2599 V2789) Result)))) false))) (do (shen.unbindv V2593 V2789) Result))) false))) (if (shen.pvar? V2592) (let A (shen.newpv V2789) (do (shen.bindv V2592 (cons vector (cons A ())) V2789) (let Result (let V2604 (shen.lazyderef (tl V2591) V2789) (if (= () V2604) (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2604) (do (shen.bindv V2604 () V2789) (let Result (let Hyp (tl V2582) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons (shen.lazyderef A V2789) ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons (cons vector (cons (shen.lazyderef A V2789) ())) ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2604 V2789) Result))) false))) (do (shen.unbindv V2592 V2789) Result)))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let Case (let V2605 (shen.lazyderef V2787 V2789) (if (cons? V2605) (let V2606 (shen.lazyderef (hd V2605) V2789) (if (cons? V2606) (let V2607 (shen.lazyderef (hd V2606) V2789) (if (cons? V2607) (let V2608 (shen.lazyderef (hd V2607) V2789) (if (= @s V2608) (let V2609 (shen.lazyderef (tl V2607) V2789) (if (cons? V2609) (let X (hd V2609) (let V2610 (shen.lazyderef (tl V2609) V2789) (if (cons? V2610) (let Y (hd V2610) (let V2611 (shen.lazyderef (tl V2610) V2789) (if (= () V2611) (let V2612 (shen.lazyderef (tl V2606) V2789) (if (cons? V2612) (let V2613 (shen.lazyderef (hd V2612) V2789) (if (= : V2613) (let V2614 (shen.lazyderef (tl V2612) V2789) (if (cons? V2614) (let V2615 (shen.lazyderef (hd V2614) V2789) (if (= string V2615) (let V2616 (shen.lazyderef (tl V2614) V2789) (if (= () V2616) (let Hyp (tl V2605) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons string ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2616) (do (shen.bindv V2616 () V2789) (let Result (let Hyp (tl V2605) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons string ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2616 V2789) Result))) false))) (if (shen.pvar? V2615) (do (shen.bindv V2615 string V2789) (let Result (let V2617 (shen.lazyderef (tl V2614) V2789) (if (= () V2617) (let Hyp (tl V2605) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons string ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (if (shen.pvar? V2617) (do (shen.bindv V2617 () V2789) (let Result (let Hyp (tl V2605) (do (shen.incinfs) (bind V2788 (cons (cons (shen.lazyderef X V2789) (cons : (cons string ()))) (cons (cons (shen.lazyderef Y V2789) (cons : (cons string ()))) (shen.lazyderef Hyp V2789))) V2789 V2790))) (do (shen.unbindv V2617 V2789) Result))) false))) (do (shen.unbindv V2615 V2789) Result))) false))) false)) false)) false)) false))) false))) false)) false)) false)) false)) false)) (if (= Case false) (let V2618 (shen.lazyderef V2787 V2789) (if (cons? V2618) (let X (hd V2618) (let Hyp (tl V2618) (let NewHyps (shen.newpv V2789) (do (shen.incinfs) (bind V2788 (cons (shen.lazyderef X V2789) (shen.lazyderef NewHyps V2789)) V2789 (freeze (shen.t*-hyps Hyp NewHyps V2789 V2790))))))) false)) Case)) Case)) Case)) Case)))
