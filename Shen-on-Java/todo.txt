Can we hold a single object that is the shen system that we can call things on? So it doesn't have to be static to initiate call to it?

...internal.compiler.batch.Main.setPaths
Get all the VM default classpaths like it does there in all those handle* calls

When change shenj.dot/ we don't need the / in there because it always has a prepend of something else like > # %, etc.

Support specifying overloaded methods in sub-class mechanism

TODO next:
subclassing/interfaces/protocols
namespacing
thread contexts?

tail recursion elimination special case for do

Handle full class reloading by byte code manipulation and one level of indirection to access classes

Check read primitive kl-java-to-traverse, side effects in expression?

Need to support runtime dynamic java call dispatch

Could support leaving off type in instance method call by generating runtime javaDispatch instead of static

partial application of java calls? Could support if we use the *: thing

Support defun in let so test programs can run?

Optimization: Instead of ToEval stuff, use anon classloader

[do | Args] -> Args @p first evaled then second of last arg for expression

I think the compiler error regex matching won't work when it supports class name from .../module/func

For partial application, don't create a new lambda, use the one that already exists that the function field is assigned to
so... shenj.root.Str.LAMBDA kind of thing or Primitives.str kind of thing

store original shen code and java code for each function in globalprops to allow access to them at runtime?

Can we do symbols as constants to speed them up?

Fix the true finding for cond code gen

How to remove properties from an image
How to remove functions from an image

--------  Done  ----------------

Create executable jar

We need to handle casting in the method signatures--we'll need to do that with reflection, so we'll have to call into java to get the argstring

Argument evaluation needs to handle java static fields--so that would be in the top level of kl-to-java-traverse a new pattern match with guard

fix str so it matches spec as clarified

Fix handle-java-call to call parse java call
